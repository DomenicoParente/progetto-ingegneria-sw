Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ClientMessageHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Client;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.*;\r\n\r\npublic interface ClientMessageHandler {\r\n    void visit(ErrorLoginNotification msg);\r\n    void visit(SetUpNotification msg);\r\n    void visit(SelectCardNotification msg);\r\n    void visit(SimplyNotification msg);\r\n    void visit(StartGameNotification msg);\r\n    void visit(ChooseCardNotification msg);\r\n    void visit(SetPlayerCardResponse msg);\r\n    void visit(AviableCardResponse msg);\r\n    void visit(ChooseStartingPlayerNotification msg);\r\n    void visit(AviablePlayersResponse msg);\r\n    void visit(SetStartingPlayerResponse msg);\r\n    void visit(PlaceWorkerResponse msg);\r\n    void visit(PlaceWorkersNotification msg);\r\n    void visit(AviablePlaceWorkerPointResponse msg);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ClientMessageHandler.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ClientMessageHandler.java	(date 1587394793522)
@@ -10,11 +10,12 @@
     void visit(StartGameNotification msg);
     void visit(ChooseCardNotification msg);
     void visit(SetPlayerCardResponse msg);
-    void visit(AviableCardResponse msg);
+    void visit(AvailableCardResponse msg);
     void visit(ChooseStartingPlayerNotification msg);
-    void visit(AviablePlayersResponse msg);
+    void visit(AvailablePlayersResponse msg);
     void visit(SetStartingPlayerResponse msg);
     void visit(PlaceWorkerResponse msg);
     void visit(PlaceWorkersNotification msg);
-    void visit(AviablePlaceWorkerPointResponse msg);
+    void visit(AvailablePlaceWorkerPointResponse msg);
+    void visit(BoardUpdateNotification msg);
 }
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ViewInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Client;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Point;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ViewInterface {\r\n    String login();\r\n    void chooseCards(List<String> cardsName, int numberOfCardsRequired);\r\n    void displayMenu();\r\n    void displayChooseCardMenu();\r\n    void displayMessage(String s);\r\n    void displayChooseStartingPlayerMenu();\r\n    void displayPlaceWorkerMenu();\r\n    void addLightWorker(LightWorker lightWorker);\r\n    void addLightWorker(Point point);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ViewInterface.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ViewInterface.java	(date 1587393615655)
@@ -1,5 +1,6 @@
 package it.polimi.ingsw.ParenteVenturini.Network.Client;
 
+import it.polimi.ingsw.ParenteVenturini.Model.Board;
 import it.polimi.ingsw.ParenteVenturini.Model.Point;
 
 import java.util.List;
@@ -7,11 +8,12 @@
 public interface ViewInterface {
     String login();
     void chooseCards(List<String> cardsName, int numberOfCardsRequired);
-    void displayMenu();
     void displayChooseCardMenu();
+    void displayBoard(Board board);
+    void displayMenu();
+    void displayMoveMenu();
     void displayMessage(String s);
     void displayChooseStartingPlayerMenu();
     void displayPlaceWorkerMenu();
-    void addLightWorker(LightWorker lightWorker);
     void addLightWorker(Point point);
 }
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Model;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Exceptions.IllegalBlockUpdateException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Board {\r\n\r\n    private Block[][] board;\r\n    private List<Worker> workers;\r\n\r\n    public Board() {\r\n        board = new Block[5][5];\r\n        workers = new ArrayList<Worker>();\r\n\r\n        for(int i = 0; i<5; i++){\r\n            for (int j = 0; j<5; j++){\r\n                board[i][j] = new Block();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void setWorker(Worker w) {\r\n        workers.add(w);\r\n    }\r\n\r\n    public boolean isOccupied(Point point) {\r\n        for (Worker w : workers) {\r\n            if (w.getPosition().equals(point))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isOccupied(int x, int y) {\r\n        Point pointTemp = new Point(x, y);\r\n        for (Worker w : workers) {\r\n            if (w.getPosition().equals(pointTemp))\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n\r\n    public boolean isThereDome(Point point) {\r\n        return board[point.getX()][point.getY()].isDome();\r\n    }\r\n\r\n    public boolean isThereDome(int x, int y) {\r\n        return board[x][y].isDome();\r\n    }\r\n\r\n    public int blockLevel(Point point) {\r\n        return board[point.getX()][point.getY()].getLevel();\r\n    }\r\n\r\n    public int blockLevel(int x, int y) {\r\n            return board[x][y].getLevel();\r\n    }\r\n\r\n    public void setBlockLevel(Point point, int level) throws IllegalBlockUpdateException {\r\n            board[point.getX()][point.getY()].updateLevel(level);\r\n    }\r\n    public void setDome(Point point,boolean x) {\r\n            board[point.getX()][point.getY()].setDome(x);\r\n    }\r\n\r\n    public Worker findByPosition(Point point) {\r\n        for (Worker w : workers) {\r\n            if (w.getPosition().equals(point))\r\n                return w;\r\n            }\r\n            return null;\r\n    }\r\n\r\n    public boolean isValidPoint(Point point){\r\n        return point.getX() >= 0 && point.getX() <= 4 && point.getY() >= 0 && point.getY() <= 4;\r\n    }\r\n\r\n    public boolean isValidPoint(int x, int y){\r\n        return x >= 0 && x <= 4 && y >= 0 && y <= 4;\r\n    }\r\n\r\n    public boolean isPerimeterPoint(Point point){\r\n        return point.getX() == 0 || point.getX() == 4 || point.getY() == 0 || point.getY() == 4;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Board.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Board.java	(date 1587394396215)
@@ -2,10 +2,11 @@
 
 import it.polimi.ingsw.ParenteVenturini.Model.Exceptions.IllegalBlockUpdateException;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
-public class Board {
+public class Board implements Serializable {
 
     private Block[][] board;
     private List<Worker> workers;
@@ -72,6 +73,15 @@
             }
             return null;
     }
+
+    public Worker findByPosition(int x, int y) {
+        Point point= new Point(x,y);
+        for (Worker w : workers) {
+            if (w.getPosition().equals(point))
+                return w;
+        }
+        return null;
+    }
 
     public boolean isValidPoint(Point point){
         return point.getX() >= 0 && point.getX() <= 4 && point.getY() >= 0 && point.getY() <= 4;
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AviablePlaceWorkerPointResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Point;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Client.ClientMessageHandler;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.MessageType;\r\n\r\nimport java.util.List;\r\n\r\npublic class AviablePlaceWorkerPointResponse implements MessageToClient {\r\n\r\n    private List<Point> points;\r\n\r\n    public AviablePlaceWorkerPointResponse(List<Point> points) {\r\n        this.points = points;\r\n    }\r\n\r\n    public List<Point> getPoints() {\r\n        return points;\r\n    }\r\n\r\n    @Override\r\n    public MessageType getMessageType() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getValues() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void accept(ClientMessageHandler msgHandler) {\r\n        msgHandler.visit(this);\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AviablePlaceWorkerPointResponse.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AvailablePlaceWorkerPointResponse.java	(date 1587394043622)
@@ -6,11 +6,11 @@
 
 import java.util.List;
 
-public class AviablePlaceWorkerPointResponse implements MessageToClient {
+public class AvailablePlaceWorkerPointResponse implements MessageToClient {
 
     private List<Point> points;
 
-    public AviablePlaceWorkerPointResponse(List<Point> points) {
+    public AvailablePlaceWorkerPointResponse(List<Point> points) {
         this.points = points;
     }
 
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Worker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Model;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Effects.OpponentEffect;\r\n\r\npublic class Worker {\r\n\r\n    private Point position;\r\n    private Point lastPosition;\r\n    private Player player;\r\n    private int colour;\r\n\r\n    public Worker(Point position, Player player, int colour) {\r\n        this.position = position;\r\n        this.lastPosition = position;\r\n        this.player = player;\r\n        this.colour = colour;\r\n    }\r\n\r\n    public int getColour() {\r\n        return colour;\r\n    }\r\n\r\n    public Point getPosition(){\r\n        return position;\r\n    }\r\n\r\n    public OpponentEffect getEffect(){\r\n        return player.getOpponentEffectPlayer();\r\n    }\r\n\r\n    public void setPosition(Point point){\r\n        setLastPosition(this.position);\r\n        this.position = point;\r\n    }\r\n\r\n    public Point getLastPosition() {\r\n        return lastPosition;\r\n    }\r\n\r\n    public void setLastPosition(Point lastPosition) {\r\n        this.lastPosition = lastPosition;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Worker.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Worker.java	(date 1587397541015)
@@ -2,7 +2,9 @@
 
 import it.polimi.ingsw.ParenteVenturini.Model.Effects.OpponentEffect;
 
-public class Worker {
+import java.io.Serializable;
+
+public class Worker implements Serializable {
 
     private Point position;
     private Point lastPosition;
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Block.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Model;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Exceptions.IllegalBlockUpdateException;\r\n\r\npublic class Block {\r\n\r\n    private int level;\r\n    private boolean dome;\r\n\r\n    public Block() {\r\n        this.level = 0;\r\n        this.dome = false;\r\n    }\r\n\r\n    public int getLevel() {\r\n        return level;\r\n    }\r\n\r\n    public boolean isDome() {\r\n        return dome;\r\n    }\r\n\r\n    public void updateLevel(int level) throws IllegalBlockUpdateException {\r\n        if(level>4 || level<0) {\r\n            throw new IllegalBlockUpdateException();\r\n        }\r\n        this.level = level;\r\n        if(level==4)\r\n            this.setDome(true);\r\n    }\r\n\r\n    public void setDome(boolean dome) {\r\n\r\n        this.dome = dome;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Block.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Block.java	(date 1587395980376)
@@ -2,7 +2,9 @@
 
 import it.polimi.ingsw.ParenteVenturini.Model.Exceptions.IllegalBlockUpdateException;
 
-public class Block {
+import java.io.Serializable;
+
+public class Block implements Serializable {
 
     private int level;
     private boolean dome;
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ClientSideController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Client;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Point;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.*;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.*;\r\n\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.Socket;\r\nimport java.util.Scanner;\r\n\r\npublic class ClientSideController implements ClientMessageHandler {\r\n\r\n    private ObjectInputStream readStream;\r\n    private ObjectOutputStream writeStream;\r\n    private Scanner stdIn;\r\n    private Socket socket;\r\n    private ViewInterface client;\r\n\r\n    public ClientSideController(ObjectInputStream readStream, ObjectOutputStream writeStream, Scanner stdIn, Socket socket) {\r\n        this.readStream = readStream;\r\n        this.writeStream = writeStream;\r\n        this.socket = socket;\r\n        this.stdIn = stdIn;\r\n    }\r\n\r\n    public void setView(ViewInterface client){\r\n        this.client = client;\r\n    }\r\n\r\n    public void handleMessage(MessageToClient msg){\r\n        msg.accept(this);\r\n    }\r\n\r\n    public void sendMessage(MessageToServer msg){\r\n        try {\r\n            writeStream.writeObject(msg);\r\n            writeStream.flush();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void visit(ErrorLoginNotification msg) {\r\n        client.displayMessage(msg.getNickname()+\": \"+msg.getValues().get(0));\r\n        client.login();\r\n    }\r\n\r\n    @Override\r\n    public void visit(SetUpNotification msg) {\r\n        client.displayMessage(\"Fase di setUp iniziata\");\r\n    }\r\n\r\n    @Override\r\n    public void visit(SelectCardNotification msg) {\r\n        client.chooseCards(msg.getValues(), msg.numberOfCardsRequired());\r\n    }\r\n\r\n    @Override\r\n    public void visit(SimplyNotification msg) {\r\n        client.displayMessage(msg.getValues().get(0));\r\n    }\r\n\r\n    @Override\r\n    public void visit(StartGameNotification msg) {\r\n        client.displayMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(ChooseCardNotification msg) {\r\n        client.displayChooseCardMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(SetPlayerCardResponse msg) {\r\n        client.displayMessage(msg.getValues().get(0));\r\n        if(! msg.isSet())\r\n            client.displayChooseCardMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(AviableCardResponse msg) {\r\n        for(String s: msg.getValues())\r\n            client.displayMessage(s);\r\n        client.displayChooseCardMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(ChooseStartingPlayerNotification msg) {\r\n        client.displayChooseStartingPlayerMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(AviablePlayersResponse msg) {\r\n        for(String s: msg.getValues())\r\n            client.displayMessage(s);\r\n        client.displayChooseStartingPlayerMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(SetStartingPlayerResponse msg) {\r\n        client.displayMessage(msg.getValues().get(0));\r\n        if(! msg.isSet())\r\n            client.displayChooseStartingPlayerMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(PlaceWorkersNotification msg) {\r\n        client.displayPlaceWorkerMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(AviablePlaceWorkerPointResponse msg) {\r\n        client.displayMessage(msg.getPoints().toString());\r\n        client.displayPlaceWorkerMenu();\r\n    }\r\n\r\n    @Override\r\n    public void visit(PlaceWorkerResponse msg) {\r\n        System.out.println(msg.getSettedPoint().toString());\r\n        if(msg.isSet()) {\r\n            //client.addLightWorker(new LightWorker(msg.getSettedPoint() ));\r\n            client.addLightWorker(msg.getSettedPoint());\r\n            System.out.println(\"fatto\");\r\n        }\r\n\r\n        client.displayMessage(msg.getMessage());\r\n        if(!msg.isHasFinished()) {\r\n            client.displayPlaceWorkerMenu();\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ClientSideController.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/ClientSideController.java	(date 1587394793522)
@@ -1,6 +1,5 @@
 package it.polimi.ingsw.ParenteVenturini.Network.Client;
 
-import it.polimi.ingsw.ParenteVenturini.Model.Point;
 import it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.*;
 import it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.*;
 
@@ -81,7 +80,7 @@
     }
 
     @Override
-    public void visit(AviableCardResponse msg) {
+    public void visit(AvailableCardResponse msg) {
         for(String s: msg.getValues())
             client.displayMessage(s);
         client.displayChooseCardMenu();
@@ -93,7 +92,7 @@
     }
 
     @Override
-    public void visit(AviablePlayersResponse msg) {
+    public void visit(AvailablePlayersResponse msg) {
         for(String s: msg.getValues())
             client.displayMessage(s);
         client.displayChooseStartingPlayerMenu();
@@ -112,11 +111,16 @@
     }
 
     @Override
-    public void visit(AviablePlaceWorkerPointResponse msg) {
+    public void visit(AvailablePlaceWorkerPointResponse msg) {
         client.displayMessage(msg.getPoints().toString());
         client.displayPlaceWorkerMenu();
     }
 
+    @Override
+    public void visit(BoardUpdateNotification msg) {
+        client.displayBoard(msg.getBoard());
+    }
+
     @Override
     public void visit(PlaceWorkerResponse msg) {
         System.out.println(msg.getSettedPoint().toString());
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/CLI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Client;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Point;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.PlaceWorkerResponse;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class CLI implements ViewInterface {\r\n\r\n    private Scanner stdIn = new Scanner(System.in);\r\n    private ClientSideController clientSideController;\r\n    private String nickname;\r\n    private List<LightWorker> lightWorkers;\r\n\r\n    public CLI(ClientSideController clientInMessageHandler) {\r\n        this.clientSideController = clientInMessageHandler;\r\n        this.lightWorkers = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public String login(){\r\n        try {\r\n            System.out.println(\"Inserire nickname\");\r\n            String name = stdIn.nextLine();\r\n            System.out.println(\"Inserire numero giocatori\");\r\n            String numOfPlayers = stdIn.nextLine();\r\n            MessageToServer message = new AccessGameMessageRequest(name, numOfPlayers);\r\n            clientSideController.sendMessage(message);\r\n            System.out.println(\"Message inviato\");\r\n            System.out.println(\"Il tuo nickanme è: \"+name);\r\n            nickname = name;\r\n            return name;\r\n        }\r\n        catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void chooseCards(List<String> cardsName, int numberOfCardsRequired) {\r\n        System.out.println(\"Digita il numero delle carte che vuoi usare:\");\r\n        List<String> choosen = new ArrayList<>();\r\n\r\n        int i = 1;\r\n        for (String name: cardsName){\r\n            System.out.println(i+\" - \"+name);\r\n            i++;\r\n        }\r\n\r\n        while(choosen.size()!=numberOfCardsRequired){\r\n            System.out.println(\"numero: \");\r\n            String num = stdIn.nextLine();\r\n            if(!choosen.contains(cardsName.get(Integer.parseInt(num)-1)))\r\n                choosen.add(cardsName.get(Integer.parseInt(num)-1));\r\n            else\r\n                System.out.println(\"Carta già scelta\");\r\n        }\r\n\r\n        MessageToServer message = new StoreSelectedCardsRequest(nickname, choosen);\r\n        clientSideController.sendMessage(message);\r\n        System.out.println(\"Message inviato\");\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void printString(String s){\r\n        System.out.println(s);\r\n    }\r\n\r\n    @Override\r\n    public void displayMenu(){\r\n        while(true) {\r\n            printString(\"--Menu--\");\r\n            printString(\"1- Scegli la tua carta\");\r\n            printString(\"2- Posiziona operai\");\r\n            printString(\"Scelta: \");\r\n            stdIn.nextLine();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void displayChooseCardMenu() {\r\n        int choice;\r\n        do {\r\n            printString(\"--Menu card SetUp--\");\r\n            printString(\"1- Get possible Cards\");\r\n            printString(\"2- Choose and send your card\");\r\n            printString(\"Choice: \");\r\n            String number = stdIn.nextLine();\r\n            choice = Integer.parseInt(number);\r\n            if (choice == 1) {\r\n                MessageToServer message = new AviableCardRequest(nickname);\r\n                clientSideController.sendMessage(message);\r\n            } else if (choice == 2) {\r\n                printString(\"card name:\");\r\n                String card = stdIn.nextLine();\r\n                MessageToServer message = new SetPlayerCardRequest(nickname, card);\r\n                clientSideController.sendMessage(message);\r\n            }\r\n        }while(choice<1 || choice>2);\r\n    }\r\n\r\n    @Override\r\n    public void displayMessage(String s) {\r\n        printString(s);\r\n    }\r\n\r\n    @Override\r\n    public void displayChooseStartingPlayerMenu() {\r\n        int choice;\r\n        do {\r\n            printString(\"--Menu starting Player SetUp--\");\r\n            printString(\"1- Get possible Players\");\r\n            printString(\"2- Choose starting player\");\r\n            printString(\"Choice: \");\r\n            String number = stdIn.nextLine();\r\n            choice = Integer.parseInt(number);\r\n            if (choice == 1) {\r\n                MessageToServer message = new AviablePlayerRequest(nickname);\r\n                clientSideController.sendMessage(message);\r\n            } else if (choice == 2) {\r\n                printString(\"player name:\");\r\n                String playerName = stdIn.nextLine();\r\n                MessageToServer message = new SetStartingPlayerRequest(nickname, playerName);\r\n                clientSideController.sendMessage(message);\r\n            }\r\n        }while(choice<1 || choice>2);\r\n    }\r\n\r\n    @Override\r\n    public void displayPlaceWorkerMenu() {\r\n        int choice;\r\n        do {\r\n            printString(\"--Menu Place Worker setUp--\");\r\n            printString(\"1- Get possible Points\");\r\n            printString(\"2- Place worker\");\r\n            printString(\"Choice: \");\r\n            String number = stdIn.nextLine();\r\n            choice = Integer.parseInt(number);\r\n            if (choice == 1) {\r\n                MessageToServer message = new AviablePlaceWorkerPointRequest();\r\n                clientSideController.sendMessage(message);\r\n            }\r\n            else if (choice == 2) {\r\n                printString(\"x :\");\r\n                String xPos = stdIn.nextLine();\r\n                printString(\"y :\");\r\n                String yPos = stdIn.nextLine();\r\n                Point point = new Point(Integer.parseInt(xPos), Integer.parseInt(yPos));\r\n                MessageToServer message = new PlaceWorkerRequest(point, nickname);\r\n                clientSideController.sendMessage(message);\r\n            }\r\n            else if( choice == 3) {\r\n                System.exit(0);\r\n            }\r\n\r\n        }while(choice<1 || choice>3);\r\n    }\r\n\r\n    @Override\r\n    public void addLightWorker(LightWorker lightWorker) {\r\n        lightWorkers.add(lightWorker);\r\n    }\r\n\r\n    @Override\r\n    public void addLightWorker(Point point) {\r\n        /*\r\n        if(point == null)\r\n            System.out.println(\"nullo\");\r\n        System.out.println(point);\r\n\r\n         */\r\n        lightWorkers.add(new LightWorker(point));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/CLI.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Client/CLI.java	(date 1587397141581)
@@ -1,5 +1,6 @@
 package it.polimi.ingsw.ParenteVenturini.Network.Client;
 
+import it.polimi.ingsw.ParenteVenturini.Model.Board;
 import it.polimi.ingsw.ParenteVenturini.Model.Point;
 import it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.PlaceWorkerResponse;
 import it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.*;
@@ -14,10 +15,12 @@
     private ClientSideController clientSideController;
     private String nickname;
     private List<LightWorker> lightWorkers;
+    private ColourPrint colourPrint;
 
     public CLI(ClientSideController clientInMessageHandler) {
         this.clientSideController = clientInMessageHandler;
         this.lightWorkers = new ArrayList<>();
+        this.colourPrint = new ColourPrint();
     }
 
     @Override
@@ -30,7 +33,7 @@
             MessageToServer message = new AccessGameMessageRequest(name, numOfPlayers);
             clientSideController.sendMessage(message);
             System.out.println("Message inviato");
-            System.out.println("Il tuo nickanme è: "+name);
+            System.out.println("Il tuo nickname è: "+name);
             nickname = name;
             return name;
         }
@@ -74,6 +77,11 @@
         System.out.println(s);
     }
 
+    private void print(String s){
+        System.out.print(s);
+    }
+
+
     @Override
     public void displayMenu(){
         while(true) {
@@ -96,7 +104,7 @@
             String number = stdIn.nextLine();
             choice = Integer.parseInt(number);
             if (choice == 1) {
-                MessageToServer message = new AviableCardRequest(nickname);
+                MessageToServer message = new AvailableCardRequest(nickname);
                 clientSideController.sendMessage(message);
             } else if (choice == 2) {
                 printString("card name:");
@@ -107,6 +115,29 @@
         }while(choice<1 || choice>2);
     }
 
+    @Override
+    public void displayBoard(Board board) {
+        printString("     0     1     2     3     4   ");
+        //printString("1 | " + "  " + "| " + "  " + "| " + "  " + "|     ""|     ""|");
+        for(int i=0;i<5;i++) {
+            printString("  -------------------------------");
+            print(i+" | ");
+            for (int j = 0; j < 5; j++) {
+                if(board.isOccupied(i,j)) {
+                    int k=board.findByPosition(i,j).getColour();
+                    colourPrint.print(k,"&");
+                }
+                else if(board.isThereDome(i,j)){
+                    print("O");
+                }
+                print("  ");
+                print(" "+board.blockLevel(i,j)+"| ");
+            }
+            print("\n");
+        }
+        printString("  -------------------------------");
+    }
+
     @Override
     public void displayMessage(String s) {
         printString(s);
@@ -123,7 +154,7 @@
             String number = stdIn.nextLine();
             choice = Integer.parseInt(number);
             if (choice == 1) {
-                MessageToServer message = new AviablePlayerRequest(nickname);
+                MessageToServer message = new AvailablePlayerRequest(nickname);
                 clientSideController.sendMessage(message);
             } else if (choice == 2) {
                 printString("player name:");
@@ -145,10 +176,9 @@
             String number = stdIn.nextLine();
             choice = Integer.parseInt(number);
             if (choice == 1) {
-                MessageToServer message = new AviablePlaceWorkerPointRequest();
+                MessageToServer message = new AvailablePlaceWorkerPointRequest();
                 clientSideController.sendMessage(message);
-            }
-            else if (choice == 2) {
+            } else if (choice == 2) {
                 printString("x :");
                 String xPos = stdIn.nextLine();
                 printString("y :");
@@ -157,27 +187,39 @@
                 MessageToServer message = new PlaceWorkerRequest(point, nickname);
                 clientSideController.sendMessage(message);
             }
-            else if( choice == 3) {
-                System.exit(0);
-            }
-
-        }while(choice<1 || choice>3);
-    }
-
-    @Override
-    public void addLightWorker(LightWorker lightWorker) {
-        lightWorkers.add(lightWorker);
+        }while(choice<1 || choice>2);
     }
 
     @Override
     public void addLightWorker(Point point) {
-        /*
-        if(point == null)
-            System.out.println("nullo");
-        System.out.println(point);
-
-         */
         lightWorkers.add(new LightWorker(point));
     }
 
+    @Override
+    public void displayMoveMenu() {
+        int choice;
+         do{
+            printString("--Menu Worker's move--");
+            printString("1- Muovi");
+            printString("2- Costruisci");
+            printString("Scelta: ");
+            String number= stdIn.nextLine();
+            choice = Integer.parseInt(number);
+            if (choice == 1) {
+                MessageToServer message = new AvailablePlayerRequest(nickname);
+                clientSideController.sendMessage(message);
+            } else if (choice == 2) {
+                printString("worker number (1 or 2) :");
+                String MoveNum = stdIn.nextLine();
+                printString("x :");
+                String xPos = stdIn.nextLine();
+                printString("y :");
+                String yPos = stdIn.nextLine();
+                Point point = new Point(Integer.parseInt(xPos), Integer.parseInt(yPos));
+                MessageToServer message = new PlaceWorkerRequest(point, nickname);
+                clientSideController.sendMessage(message);
+            }
+        }while(choice<1 || choice>2);
+    }
+
 }
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/ServerMessageHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Server;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.*;\r\n\r\npublic interface ServerMessageHandler {\r\n    void visit(AccessGameMessageRequest msg);\r\n    void visit(StoreSelectedCardsRequest msg);\r\n    void visit(AviableCardRequest msg);\r\n    void visit(SetPlayerCardRequest msg);\r\n    void visit(AviablePlayerRequest msg);\r\n    void visit(SetStartingPlayerRequest msg);\r\n    void visit(PlaceWorkerRequest msg);\r\n    void visit(AviablePlaceWorkerPointRequest msg);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/ServerMessageHandler.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/ServerMessageHandler.java	(date 1587394396137)
@@ -5,10 +5,10 @@
 public interface ServerMessageHandler {
     void visit(AccessGameMessageRequest msg);
     void visit(StoreSelectedCardsRequest msg);
-    void visit(AviableCardRequest msg);
+    void visit(AvailableCardRequest msg);
     void visit(SetPlayerCardRequest msg);
-    void visit(AviablePlayerRequest msg);
+    void visit(AvailablePlayerRequest msg);
     void visit(SetStartingPlayerRequest msg);
     void visit(PlaceWorkerRequest msg);
-    void visit(AviablePlaceWorkerPointRequest msg);
+    void visit(AvailablePlaceWorkerPointRequest msg);
 }
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AviablePlaceWorkerPointRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Server.ServerMessageHandler;\r\n\r\nimport java.util.List;\r\n\r\npublic class AviablePlaceWorkerPointRequest implements MessageToServer {\r\n    @Override\r\n    public MessageType getMessageType() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getValues() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void accept(ServerMessageHandler msgHandler) {\r\n        msgHandler.visit(this);\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AviablePlaceWorkerPointRequest.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AvailablePlaceWorkerPointRequest.java	(date 1587394396074)
@@ -4,7 +4,7 @@
 
 import java.util.List;
 
-public class AviablePlaceWorkerPointRequest implements MessageToServer {
+public class AvailablePlaceWorkerPointRequest implements MessageToServer {
     @Override
     public MessageType getMessageType() {
         return null;
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AviableCardResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Client.ClientMessageHandler;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.MessageType;\r\n\r\nimport java.util.List;\r\n\r\npublic class AviableCardResponse implements MessageToClient {\r\n\r\n    private List<String> cards;\r\n\r\n    public AviableCardResponse(List<String> cards) {\r\n        this.cards = cards;\r\n    }\r\n\r\n    @Override\r\n    public MessageType getMessageType() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getValues() {\r\n        return cards;\r\n    }\r\n\r\n    @Override\r\n    public void accept(ClientMessageHandler msgHandler) {\r\n        msgHandler.visit(this);\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AviableCardResponse.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AvailableCardResponse.java	(date 1587394043731)
@@ -5,11 +5,11 @@
 
 import java.util.List;
 
-public class AviableCardResponse implements MessageToClient {
+public class AvailableCardResponse implements MessageToClient {
 
     private List<String> cards;
 
-    public AviableCardResponse(List<String> cards) {
+    public AvailableCardResponse(List<String> cards) {
         this.cards = cards;
     }
 
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AviablePlayersResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Client.ClientMessageHandler;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.MessageType;\r\n\r\nimport java.util.List;\r\n\r\npublic class AviablePlayersResponse implements MessageToClient {\r\n    private List<String> players;\r\n\r\n    public AviablePlayersResponse(List<String> cards) {\r\n        this.players = cards;\r\n    }\r\n\r\n    @Override\r\n    public MessageType getMessageType() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getValues() {\r\n        return players;\r\n    }\r\n\r\n    @Override\r\n    public void accept(ClientMessageHandler msgHandler) {\r\n        msgHandler.visit(this);\r\n    }\r\n}\r\n\r\n
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AviablePlayersResponse.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToClient/AvailablePlayersResponse.java	(date 1587394043716)
@@ -5,10 +5,10 @@
 
 import java.util.List;
 
-public class AviablePlayersResponse implements MessageToClient {
+public class AvailablePlayersResponse implements MessageToClient {
     private List<String> players;
 
-    public AviablePlayersResponse(List<String> cards) {
+    public AvailablePlayersResponse(List<String> cards) {
         this.players = cards;
     }
 
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AviableCardRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Server.ServerMessageHandler;\r\n\r\nimport java.util.List;\r\n\r\npublic class AviableCardRequest implements MessageToServer {\r\n\r\n    private String nickname;\r\n\r\n    public AviableCardRequest(String nickname) {\r\n        this.nickname = nickname;\r\n    }\r\n\r\n    @Override\r\n    public MessageType getMessageType() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getValues() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void accept(ServerMessageHandler msgHandler) {\r\n        msgHandler.visit(this);\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AviableCardRequest.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AvailableCardRequest.java	(date 1587394396199)
@@ -4,11 +4,11 @@
 
 import java.util.List;
 
-public class AviableCardRequest implements MessageToServer {
+public class AvailableCardRequest implements MessageToServer {
 
     private String nickname;
 
-    public AviableCardRequest(String nickname) {
+    public AvailableCardRequest(String nickname) {
         this.nickname = nickname;
     }
 
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AviablePlayerRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Client.ClientMessageHandler;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.MessageToClient;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Server.ServerMessageHandler;\r\n\r\nimport java.util.List;\r\n\r\npublic class AviablePlayerRequest implements MessageToServer {\r\n\r\n    private String nickname;\r\n\r\n    public AviablePlayerRequest(String nickname) {\r\n        this.nickname = nickname;\r\n    }\r\n\r\n    @Override\r\n    public MessageType getMessageType() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getValues() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void accept(ServerMessageHandler msgHandler) {\r\n        msgHandler.visit(this);\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AviablePlayerRequest.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/MessagesToServer/AvailablePlayerRequest.java	(date 1587394396152)
@@ -6,11 +6,11 @@
 
 import java.util.List;
 
-public class AviablePlayerRequest implements MessageToServer {
+public class AvailablePlayerRequest implements MessageToServer {
 
     private String nickname;
 
-    public AviablePlayerRequest(String nickname) {
+    public AvailablePlayerRequest(String nickname) {
         this.nickname = nickname;
     }
 
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Turn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Model;\r\n\r\nimport java.util.List;\r\n\r\npublic class Turn {\r\n\r\n    private List<Player> players;\r\n    private OpponentEffectContainer opponentEffectContainer;\r\n    private Player currentPlayer;\r\n    private Worker currentWorker;\r\n    private int numTurn;\r\n\r\n    public Turn(List<Player> players) {\r\n        this.players = players;\r\n        this.currentPlayer = players.get(0);\r\n        this.numTurn=1;\r\n    }\r\n\r\n    public void setNextPlayer() {\r\n        int lastPlayer = players.indexOf(currentPlayer);\r\n        if(lastPlayer == players.size()-1 ) {\r\n            currentPlayer = players.get(0);\r\n            updateNewTurn();\r\n        }\r\n        else\r\n            currentPlayer = players.get(lastPlayer+1);\r\n        currentWorker = null;\r\n    }\r\n\r\n    private void updateNewTurn(){\r\n        numTurn++;\r\n        opponentEffectContainer.switchToNewTurn();\r\n    }\r\n\r\n    public void setActualWorker(Worker w){\r\n        if(currentWorker == null)\r\n            currentWorker = w;\r\n    }\r\n\r\n    public Player getCurrentPlayer() {\r\n        return currentPlayer;\r\n    }\r\n\r\n    public Worker getCurrentWorker() {\r\n        return currentWorker;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Turn.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Turn.java	(date 1587394852567)
@@ -10,10 +10,11 @@
     private Worker currentWorker;
     private int numTurn;
 
-    public Turn(List<Player> players) {
+    public Turn(List<Player> players, OpponentEffectContainer op) {
         this.players = players;
         this.currentPlayer = players.get(0);
         this.numTurn=1;
+        this.opponentEffectContainer=op;
     }
 
     public void setNextPlayer() {
@@ -44,4 +45,8 @@
     public Worker getCurrentWorker() {
         return currentWorker;
     }
+
+    public int getNumTurn() {
+        return numTurn;
+    }
 }
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Server;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Cards.Card;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Cards.Deck;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Exceptions.*;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Match;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Player;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Point;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Worker;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Exceptions.IllegalCardException;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Exceptions.IllegalPlaceWorkerException;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Exceptions.NotYourTurnException;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class GameController {\r\n    private List<ClientController> clients = new ArrayList<>();\r\n    private Match match;\r\n    private CardSetupHandler cardSetupHandler;\r\n    private PlaceWorkerSetupHandler placeWorkerSetupHandler;\r\n    private Deck deck = new Deck();\r\n\r\n    public GameController(int numOfPlayers){\r\n        match = new Match();\r\n        try {\r\n            match.setTypeOfMatch(numOfPlayers);\r\n        } catch (InvalidTypeOfMatch invalidTypeOfMatch) {\r\n            invalidTypeOfMatch.printStackTrace();\r\n        }\r\n        System.out.println(\"Creata partita da \"+numOfPlayers+\" giocatori\");\r\n    }\r\n\r\n    public Player addPlayer(ClientController client, String nickname){\r\n\r\n        int i = 1;\r\n        String originalNickname = nickname;\r\n        while (!isValidNickname(nickname)){\r\n            nickname = originalNickname+\" (\"+i+\")\";\r\n            i++;\r\n        }\r\n        try {\r\n            match.addPlayer(nickname);\r\n            System.out.println(\"add player\");\r\n            for (Player p: match.getPlayers())\r\n                System.out.println(\"---: \"+p.getNickname());\r\n        } catch (NoMorePlayersException | AlreadyPresentPlayerException | NoPlayerException e) {\r\n            System.out.println(\"Error\");\r\n            e.printStackTrace();\r\n        }\r\n        clients.add(client);\r\n        return match.selectPlayer(nickname);\r\n    }\r\n\r\n    public boolean isValidNickname(String nickname){\r\n        return match.selectPlayer(nickname) == null;\r\n    }\r\n\r\n    public void startSetup(){\r\n        if(match.getTypeOfMatch() == clients.size()) {\r\n            notifyAllClients(new SimplyNotification( \"E' iniziata la fase di setUp, tra poco tocca a te...\"));\r\n            try {\r\n                match.setChallenger();\r\n            } catch (NoPlayerException e) {\r\n                e.printStackTrace();\r\n            }\r\n            Player challenger = match.getChallenger();\r\n            notifySingleClient(challenger, new SelectCardNotification(deck.getCardNames(), match.getNumPlayers()));\r\n        }\r\n        else\r\n            notifyAllClients(new SimplyNotification( \"Attendi altri giocatori\"));\r\n    }\r\n\r\n    public void notifyAllClients(MessageToClient msg){\r\n        for (ClientController client: clients){\r\n            client.sendMessage(msg);\r\n        }\r\n    }\r\n\r\n    public void notifySingleClient(ClientController client, MessageToClient msg){\r\n        client.sendMessage(msg);\r\n    }\r\n\r\n    public void notifySingleClient(Player player, MessageToClient msg){\r\n        for (ClientController c: clients){\r\n            if(c.getPlayer().getNickname().equals(player.getNickname())) {\r\n                c.sendMessage(msg);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addCardsToMatch(String nickname, List<String> values) throws IllegalCardException {\r\n        List<Card> chosenCards = new ArrayList<>();\r\n\r\n        if(nickname.equals(match.getChallenger().getNickname())){\r\n            for (String s: values){\r\n                Card card = deck.selectByName(s);\r\n                if(!chosenCards.contains(card))\r\n                    chosenCards.add(card);\r\n                else\r\n                    throw new IllegalCardException();\r\n            }\r\n\r\n        }\r\n        if(chosenCards.size() == match.getNumPlayers()){\r\n            match.setChosenCards(chosenCards);\r\n            try {\r\n                cardSetupHandler = new CardSetupHandler(chosenCards, match.getPlayers(), match.getChallenger());\r\n            } catch (NoPlayerException e) {\r\n                e.printStackTrace();\r\n            }\r\n            notifyAllClients(new SimplyNotification( \"A turno ogni giocatore sceglie una carta, inizia \"+cardSetupHandler.getNextPlayer()));\r\n            notifyAllClients(new ChooseCardNotification());\r\n        }\r\n        else{\r\n            throw new IllegalCardException();\r\n        }\r\n    }\r\n\r\n    public void setPlayerCard(Player player, String card){\r\n        try {\r\n            cardSetupHandler.setCard(player, deck.selectByName(card));\r\n            notifySingleClient(player, new SetPlayerCardResponse( true, \"Carta aggiunta\"));\r\n            if(cardSetupHandler.getNextPlayer() != null)\r\n                notifyAllClients(new SimplyNotification(player.getNickname()+\" ha scelto la sua carta, tocca a \"+cardSetupHandler.getNextPlayer()));\r\n            else {\r\n                notifyAllClients(new SimplyNotification(\"Inizio nuova fase, attendi...\"));\r\n                notifySingleClient(match.getChallenger(), new ChooseStartingPlayerNotification());\r\n            }\r\n        } catch (NotYourTurnException e) {\r\n            notifySingleClient(player, new SetPlayerCardResponse( false, \"Non è il tuo turno\"));\r\n        } catch (IllegalCardException e) {\r\n            notifySingleClient(player, new SetPlayerCardResponse( false, \"La carta scelta non è disponibile\"));\r\n        }\r\n    }\r\n\r\n    public void sendPossibleCards(ClientController clientController){\r\n        List<String> cardsName = new ArrayList<>();\r\n        for(Card c: cardSetupHandler.getPossibleCards()){\r\n            cardsName.add(c.getName());\r\n        }\r\n        notifySingleClient(clientController, new AviableCardResponse(cardsName));\r\n    }\r\n\r\n\r\n    public void setStartingPlayer(String nickname, String startingPlayerNickname){\r\n        if(nickname == match.getChallenger().getNickname()) {\r\n            try {\r\n                match.selectStarter(startingPlayerNickname);\r\n                notifySingleClient(match.getChallenger(), new SetStartingPlayerResponse( true, \"Giocatore iniziale settato\"));\r\n                notifyAllClients(new SimplyNotification(\"Ogni giocatore dovrà posizionare i propri workers\"));\r\n                placeWorkerSetupHandler = new PlaceWorkerSetupHandler(match.getPlayers(), match.getBoard());\r\n                notifyAllClients(new PlaceWorkersNotification());\r\n            } catch (AlreadyChosenStarterException e) {\r\n                e.printStackTrace();\r\n            } catch (InvalidNamePlayerException e) {\r\n                notifySingleClient(match.getChallenger(), new SetStartingPlayerResponse( false, \"Il nickname scelto non è disponibile\"));\r\n            } catch (NoPlayerException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }else{\r\n            System.out.println(\"Error setStartingPlayer method in gameController\");\r\n        }\r\n    }\r\n\r\n    public void sendPossiblePlayers(ClientController clientController){\r\n        List<String> playersNickname = new ArrayList<>();\r\n        try {\r\n            List<Player> players = match.getPlayers();\r\n            for(Player p: players)\r\n                playersNickname.add(p.getNickname());\r\n        } catch (NoPlayerException e) {\r\n            playersNickname = null;\r\n            e.printStackTrace();\r\n        }\r\n        notifySingleClient(clientController, new AviablePlayersResponse(playersNickname));\r\n    }\r\n\r\n\r\n    public void placeWorkers(Player player, Point position){\r\n        Point point = new Point(position.getX(), position.getY());\r\n        try {\r\n            placeWorkerSetupHandler.setWorkerPosition(player, position);\r\n            if(placeWorkerSetupHandler.hasFinished())\r\n                notifyAllClients(new SimplyNotification(\"Operazioni completate, fine fase di setUp\"));\r\n            else if(placeWorkerSetupHandler.getCurrentPlayer().equals(player))\r\n                notifySingleClient(player, new PlaceWorkerResponse( true, false, \"Primo worker posizionato, procedi col secondo\", position ));\r\n            else\r\n                notifySingleClient(player, new PlaceWorkerResponse( true, true, \"Secondo worker posizionato, attendi...\", position ));\r\n        } catch (IllegalPlaceWorkerException e) {\r\n            notifySingleClient(player, new PlaceWorkerResponse( false, false, \"Il worker non può essere posizionato in qualla casella\",position ));\r\n        }\r\n    }\r\n\r\n    public void sendPossibleWorkersSetupPoint(ClientController clientController){\r\n        List<Point> points = placeWorkerSetupHandler.getPossiblePoint();\r\n        notifySingleClient(clientController, new AviablePlaceWorkerPointResponse(points));\r\n    }\r\n\r\n\r\n\r\n    public int getNumOfPlayers(){\r\n        return clients.size();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/GameController.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/GameController.java	(date 1587395142632)
@@ -6,7 +6,6 @@
 import it.polimi.ingsw.ParenteVenturini.Model.Match;
 import it.polimi.ingsw.ParenteVenturini.Model.Player;
 import it.polimi.ingsw.ParenteVenturini.Model.Point;
-import it.polimi.ingsw.ParenteVenturini.Model.Worker;
 import it.polimi.ingsw.ParenteVenturini.Network.Exceptions.IllegalCardException;
 import it.polimi.ingsw.ParenteVenturini.Network.Exceptions.IllegalPlaceWorkerException;
 import it.polimi.ingsw.ParenteVenturini.Network.Exceptions.NotYourTurnException;
@@ -141,7 +140,7 @@
         for(Card c: cardSetupHandler.getPossibleCards()){
             cardsName.add(c.getName());
         }
-        notifySingleClient(clientController, new AviableCardResponse(cardsName));
+        notifySingleClient(clientController, new AvailableCardResponse(cardsName));
     }
 
 
@@ -175,7 +174,7 @@
             playersNickname = null;
             e.printStackTrace();
         }
-        notifySingleClient(clientController, new AviablePlayersResponse(playersNickname));
+        notifySingleClient(clientController, new AvailablePlayersResponse(playersNickname));
     }
 
 
@@ -183,8 +182,11 @@
         Point point = new Point(position.getX(), position.getY());
         try {
             placeWorkerSetupHandler.setWorkerPosition(player, position);
-            if(placeWorkerSetupHandler.hasFinished())
+            if(placeWorkerSetupHandler.hasFinished()){
                 notifyAllClients(new SimplyNotification("Operazioni completate, fine fase di setUp"));
+                notifyAllClients(new SimplyNotification("Inizio della fase di gioco"));
+                sendBoard();
+            }
             else if(placeWorkerSetupHandler.getCurrentPlayer().equals(player))
                 notifySingleClient(player, new PlaceWorkerResponse( true, false, "Primo worker posizionato, procedi col secondo", position ));
             else
@@ -196,10 +198,12 @@
 
     public void sendPossibleWorkersSetupPoint(ClientController clientController){
         List<Point> points = placeWorkerSetupHandler.getPossiblePoint();
-        notifySingleClient(clientController, new AviablePlaceWorkerPointResponse(points));
+        notifySingleClient(clientController, new AvailablePlaceWorkerPointResponse(points));
     }
 
-
+    public void sendBoard(){
+        notifyAllClients(new BoardUpdateNotification(match.getBoard()) );
+    }
 
     public int getNumOfPlayers(){
         return clients.size();
Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/ClientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Network.Server;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Player;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Exceptions.IllegalCardException;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.Exceptions.InvalidNicknameException;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.ErrorLoginNotification;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.MessageToClient;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToClient.SimplyNotification;\r\nimport it.polimi.ingsw.ParenteVenturini.Network.MessagesToServer.*;\r\n\r\npublic class ClientController implements ServerMessageHandler {\r\n\r\n    private ClientThreadFromServer clientThread;\r\n    private GameController gameController;\r\n    private Player player;\r\n\r\n    public ClientController(ClientThreadFromServer clientThread) {\r\n        this.clientThread = clientThread;\r\n        gameController = null;\r\n    }\r\n\r\n    public void sendMessage(MessageToClient msg){\r\n        clientThread.sendMessage(msg);\r\n    }\r\n\r\n\r\n    private void insertPlayerInGame(String nickname, String numOfPlayers){\r\n        GameDispatcher gameDispatcher = GameDispatcher.getInstance();\r\n        if(Integer.parseInt(numOfPlayers) != 2 && Integer.parseInt(numOfPlayers) != 3) {\r\n            sendMessage(new ErrorLoginNotification(nickname, \"Sono possibili partite solo da 2 o 3 giocatori\"));\r\n            return;\r\n        }\r\n        try {\r\n            gameController = gameDispatcher.getGameController(nickname, Integer.parseInt(numOfPlayers));\r\n        } catch (InvalidNicknameException e) {\r\n            sendMessage(new ErrorLoginNotification(nickname, \"Nickname non disponibile\"));\r\n            return;\r\n        }\r\n        if(gameController.getNumOfPlayers() != 0)\r\n            sendMessage(new SimplyNotification(\"Partita già inizializzata, sei stato aggiunto a quella\"));\r\n        player = gameController.addPlayer(this, nickname);\r\n        gameController.startSetup();\r\n        System.out.println(\"giocatore aggiunto: \"+player.getNickname());\r\n    }\r\n\r\n\r\n    @Override\r\n    public void visit(AccessGameMessageRequest msg) {\r\n        System.out.println(\"Messaggio arrivato\");\r\n        insertPlayerInGame(msg.getNickname(), msg.getValues().get(0));\r\n    }\r\n\r\n    @Override\r\n    public void visit(StoreSelectedCardsRequest msg) {\r\n        try {\r\n            gameController.addCardsToMatch(msg.getNickname(), msg.getValues());\r\n        } catch (IllegalCardException e) {\r\n            sendMessage(new SimplyNotification(\"Questo non dovrebbe succedere...\"));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void visit(AviableCardRequest msg) {\r\n        gameController.sendPossibleCards(this);\r\n    }\r\n\r\n    @Override\r\n    public void visit(SetPlayerCardRequest msg) {\r\n        String card = msg.getValues().get(0);\r\n        gameController.setPlayerCard(player, card);\r\n    }\r\n\r\n    @Override\r\n    public void visit(AviablePlayerRequest msg) {\r\n        gameController.sendPossiblePlayers(this);\r\n    }\r\n\r\n    @Override\r\n    public void visit(SetStartingPlayerRequest msg) {\r\n        gameController.setStartingPlayer(this.player.getNickname(), msg.getValues().get(0));\r\n    }\r\n\r\n    @Override\r\n    public void visit(PlaceWorkerRequest msg) {\r\n        if(msg.getNickname().equals(player.getNickname()))\r\n            gameController.placeWorkers(player, msg.getPoint());\r\n    }\r\n\r\n    @Override\r\n    public void visit(AviablePlaceWorkerPointRequest msg) {\r\n        gameController.sendPossibleWorkersSetupPoint(this);\r\n    }\r\n\r\n\r\n    public Player getPlayer() {\r\n        return player;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/ClientController.java	(revision 716fb7c3a076732eae84d91b22df588d218c3df0)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Network/Server/ClientController.java	(date 1587394396168)
@@ -60,7 +60,7 @@
     }
 
     @Override
-    public void visit(AviableCardRequest msg) {
+    public void visit(AvailableCardRequest msg) {
         gameController.sendPossibleCards(this);
     }
 
@@ -71,7 +71,7 @@
     }
 
     @Override
-    public void visit(AviablePlayerRequest msg) {
+    public void visit(AvailablePlayerRequest msg) {
         gameController.sendPossiblePlayers(this);
     }
 
@@ -87,7 +87,7 @@
     }
 
     @Override
-    public void visit(AviablePlaceWorkerPointRequest msg) {
+    public void visit(AvailablePlaceWorkerPointRequest msg) {
         gameController.sendPossibleWorkersSetupPoint(this);
     }
 
