Index: src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Match.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.ParenteVenturini.Model;\r\n\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Cards.Card;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Cards.Deck;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Effects.OpponentEffect;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Exceptions.*;\r\nimport it.polimi.ingsw.ParenteVenturini.Model.Moves.Move;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class Match {\r\n    private List<Player> players;\r\n    private List<Card> chosenCards;\r\n    private Board board;\r\n    private Deck deck;\r\n    private Player starter;\r\n    private int typeOfMatch;\r\n    private OpponentEffectContainer opponentEffectContainer;\r\n    private Turn turn;\r\n    private Player challenger;\r\n\r\n    public Match(){\r\n        this.board= new Board();\r\n        this.deck= new Deck();\r\n        this.players= new ArrayList<>();\r\n        this.chosenCards= new ArrayList<>();\r\n        this.opponentEffectContainer = new OpponentEffectContainer();\r\n        this.typeOfMatch = 2;\r\n        this.challenger=null;\r\n        this.turn = null;\r\n    }\r\n\r\n    public void setTurn() {\r\n        this.turn = new Turn(players,opponentEffectContainer);\r\n    }\r\n\r\n    public void addPlayer(String nickname) throws NoMorePlayersException, AlreadyPresentPlayerException {\r\n        if(getNumPlayers() < getTypeOfMatch()) {\r\n            if(selectPlayer(nickname)==null) {\r\n                Player p = new Player(nickname, this);\r\n                players.add(p);\r\n            }\r\n            else throw new AlreadyPresentPlayerException();\r\n        }\r\n        else throw new NoMorePlayersException();\r\n    }\r\n\r\n    public boolean directGameOver(){\r\n        Move move = this.getTurn().getCurrentPlayer().getMove();\r\n        Worker currentWorker = turn.getCurrentWorker();\r\n        if(move.forcedBuilding()) {\r\n            return gameOverBuilding(move, board, currentWorker);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean gameOver()  {\r\n        Move move = this.getTurn().getCurrentPlayer().getMove();\r\n\r\n        List<Worker> workers = this.getTurn().getCurrentPlayer().getWorkers();\r\n        boolean result = false;\r\n        if(move.forcedMovement()){\r\n            result = gameOverMovement(move, board, workers.get(0)) && gameOverMovement(move, board, workers.get(1));\r\n        }\r\n        else if(move.forcedBuilding()){\r\n            result = gameOverBuilding(move, board, workers.get(0)) && gameOverBuilding(move, board, workers.get(1));\r\n        }\r\n        else if( !move.forcedMovement() && !move.forcedBuilding())\r\n            return (gameOverMovement(move, board, workers.get(0)) && gameOverMovement(move, board, workers.get(0)) ) && (gameOverBuilding(move, board, workers.get(0)) && gameOverBuilding(move, board, workers.get(1)));\r\n        return result;\r\n    }\r\n\r\n    private boolean gameOverMovement(Move move, Board board, Worker currentWorker)  {\r\n        List<Point> points = null;\r\n        try {\r\n            points = move.possibleMovements(board, currentWorker);\r\n        } catch (AlreadyWalkedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        points = opponentEffectContainer.removeMovementPoint(points, currentWorker.getPosition(), currentWorker.getEffect(), board);\r\n        return points.isEmpty();\r\n    }\r\n\r\n    private boolean gameOverBuilding(Move move, Board board, Worker currentWorker)  {\r\n        List<Point> points = null;\r\n        try {\r\n            points = move.possibleBuildings(board, currentWorker);\r\n        } catch (OutOfOrderMoveException | AlreadyBuiltException | AlreadyWalkedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        points = opponentEffectContainer.removeConstructionPoint(points, currentWorker.getPosition(), currentWorker.getEffect(), board);\r\n        return points.isEmpty();\r\n    }\r\n\r\n    public Board getBoard() {\r\n        return board;\r\n    }\r\n\r\n    public Player getChallenger() {\r\n        return challenger;\r\n    }\r\n\r\n    public List<Player> getPlayers() throws NoPlayerException {\r\n        if( !players.isEmpty() )\r\n            return players;\r\n        else throw new NoPlayerException();\r\n    }\r\n\r\n    public OpponentEffectContainer getOpponentEffectContainer() {\r\n        return opponentEffectContainer;\r\n    }\r\n\r\n    public int getNumPlayers() {\r\n        if( !players.isEmpty() )\r\n            return players.size();\r\n        else return 0;\r\n    }\r\n\r\n    public int getTypeOfMatch() {\r\n        return typeOfMatch;\r\n    }\r\n\r\n    public Player getStarter() {\r\n        return starter;\r\n    }\r\n\r\n    public void setTypeOfMatch(int typeOfMatch) throws InvalidTypeOfMatch {\r\n        if(typeOfMatch==3 || typeOfMatch==2)\r\n            this.typeOfMatch = typeOfMatch;\r\n        else throw new InvalidTypeOfMatch();\r\n    }\r\n\r\n    public void setChallenger() throws NoPlayerException {\r\n        if( !players.isEmpty() ) {\r\n            Random rand = new Random();\r\n            this.challenger = players.get(rand.nextInt(players.size()));\r\n        }\r\n        else throw new NoPlayerException();\r\n    }\r\n\r\n    public Player selectPlayer(String name){\r\n        if( !players.isEmpty() ) {\r\n            for (Player p : players) {\r\n                if (name.equals(p.getNickname())) {\r\n                    return p;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    public void selectCardFromDeck(String name) throws InvalidCardException, NoMoreCardsException {\r\n        Card c = this.deck.selectByName(name);\r\n        if (chosenCards.size() < getTypeOfMatch()){\r\n            if (c != null && !chosenCards.contains(c)) {\r\n                chosenCards.add(c);\r\n            } else throw new InvalidCardException();\r\n        }else throw  new NoMoreCardsException();\r\n    }\r\n\r\n    public void selectStarter(String nickname) throws AlreadyChosenStarterException, InvalidNamePlayerException, NoPlayerException {\r\n        if( !players.isEmpty() ) {\r\n            if (starter == null) {\r\n                Player p = selectPlayer(nickname);\r\n                if (p != null) {\r\n                    this.starter = p;\r\n                    try {\r\n                        orderPlayers();\r\n                    } catch (NoStarterException | NoPlayerException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                } else throw new InvalidNamePlayerException();\r\n            } else throw new AlreadyChosenStarterException();\r\n        }\r\n        else throw new NoPlayerException();\r\n    }\r\n\r\n    public List<Card> getChosenCards(){\r\n        return chosenCards;\r\n    }\r\n\r\n    public void orderPlayers() throws NoStarterException, NoPlayerException {\r\n        if( !players.isEmpty() ) {\r\n            if (this.starter != null) {\r\n                List<Player> p = new ArrayList<>();\r\n                p.add(this.starter);\r\n                for (Player i : players) {\r\n                    if (!i.equals(starter)) {\r\n                        p.add(i);\r\n                    }\r\n                }\r\n                this.players = p;\r\n            } else throw new NoStarterException();\r\n        }\r\n        else throw new NoPlayerException();\r\n    }\r\n\r\n    public void setChosenCards(List<Card> cards){\r\n        chosenCards = cards;\r\n    }\r\n\r\n    public Turn getTurn() {\r\n        return turn;\r\n    }\r\n\r\n    public Player outOfTurnWin(){\r\n        for (Player p: players){\r\n            if(p.getCard().getWinCheck() != null && p.getCard().getWinCheck().outOfTurnWon(board))\r\n                return p;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void deletePlayer(Player player){\r\n        try {\r\n            this.chosenCards.remove(player.getCard());\r\n            OpponentEffect effect=player.getOpponentEffectPlayer();\r\n            if(effect != null){\r\n                opponentEffectContainer.removeEffect(effect);\r\n            }\r\n            this.getPlayers().remove(player);\r\n        } catch (NoPlayerException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Match.java	(revision 207da823b36f056554d72c2cd80c3a5aa6d68b05)
+++ src/main/java/it/polimi/ingsw/ParenteVenturini/Model/Match.java	(date 1588415763309)
@@ -217,6 +217,16 @@
     public void deletePlayer(Player player){
         try {
             this.chosenCards.remove(player.getCard());
+            List<Worker> workers = getBoard().getWorkers();
+            List<Worker> deletedworkers = new ArrayList<>();
+            for(Worker w: workers){
+                if(w.getPlayer().equals(player)){
+                    deletedworkers.add(w);
+                }
+            }
+            for(Worker dw: deletedworkers){
+                getBoard().getWorkers().remove(dw);
+            }
             OpponentEffect effect=player.getOpponentEffectPlayer();
             if(effect != null){
                 opponentEffectContainer.removeEffect(effect);
